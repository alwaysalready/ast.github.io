<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>php Archives | Alex Taylor</title>
	<atom:link href="/tag/php/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>by Alex Taylor</description>
	<lastBuildDate>Fri, 17 Mar 2017 22:48:38 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0</generator>
	<item>
		<title>Automatically subscribe to Buddypress group forum</title>
		<link>/auto-subscribe-group-forum/</link>
					<comments>/auto-subscribe-group-forum/#comments</comments>
		
		<dc:creator><![CDATA[Alex Taylor]]></dc:creator>
		<pubDate>Fri, 17 Mar 2017 22:48:38 +0000</pubDate>
				<category><![CDATA[Web-dev]]></category>
		<category><![CDATA[bbpress]]></category>
		<category><![CDATA[buddypress]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">/?p=3244</guid>

					<description><![CDATA[<p>On a Buddypress and BBPress enabled WordPress site, I wanted to set things up so that when a member joins a group, he/she will also automatically be subscribed to its forum. I couldn’t find a clear description of how to do this, so I thought I’d share what worked for me. First, here’s the code. [...]</p>
<p><a class="btn btn-secondary understrap-read-more-link" href="/auto-subscribe-group-forum/">Read More...<span class="screen-reader-text"> from Automatically subscribe to Buddypress group forum</span></a></p>
<p>The post <a rel="nofollow" href="/auto-subscribe-group-forum/">Automatically subscribe to Buddypress group forum</a> appeared first on <a rel="nofollow" href="/">Alex Taylor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>On a <a href="https://buddypress.org/" target="_blank" rel="noopener noreferrer">Buddypress</a> and <a href="https://bbpress.org/" target="_blank" rel="noopener noreferrer">BBPress</a> enabled WordPress site, I wanted to set things up so that when a member joins a <a href="https://buddypress.org/about/groups/" target="_blank" rel="noopener noreferrer">group</a>, he/she will also automatically be subscribed to its forum. I couldn’t find a clear description of how to do this, so I thought I’d share what worked for me.<br>
First, here’s the code. You can paste this into the <a href="https://codex.wordpress.org/Functions_File_Explained" target="_blank" rel="noopener noreferrer">functions.php</a> file in your theme directory, or the <a href="https://codex.buddypress.org/themes/bp-custom-php/" target="_blank" rel="noopener noreferrer">bp-custom.php</a> file in your plugins directory. I think it should work as is so long as you only have one forum per group.</p>
<pre class="brush: php; highlight: [5,7]; title: Add members who join a group to its forum; wrap-lines: true; notranslate">// Add member who joins a group to its forum
add_action( 'groups_join_group', 'auto_subscribe_forum', 10, 2 );
// function triggered when user joins group
function auto_subscribe_forum ( $group_id, $user_id ) {
// checks to see if there's a user ID
if( !$user_id ) return false;
// Get's an array of forum IDs for the group
$forum_ids = bbp_get_group_forum_ids( $group_id );
// checks to see if there is a forum ID
if ( !empty( $forum_ids ) ) {
// gets the first value from the array, assuming there is one forum
$forum_id = array_shift( $forum_ids );
}
// subscribes user to forum
bbp_add_user_forum_subscription( $user_id, $forum_id );
}</pre>
<p>Basically, you’re using the <code>groups_join_group</code> handle to trigger an action when someone joins a group (for example, by selecting the join group button/link on the group’s home page). The only slight oddity is that <code>bbp_get_group_forum_ids</code> returns an array (I guess in case the group has more than one forum), so you need to convert this into a single number. I do this by using the <a href="http://php.net/manual/en/function.array-shift.php" target="_blank" rel="noopener noreferrer">array_shift</a> function which returns the first value from the array.<br>
Worth noting too that this would work with other handles too, for example when a user accepts a group invite (<code><a href="http://hookr.io/plugins/buddypress/2.6.2/actions/groups_accept_invite/" target="_blank" rel="noopener noreferrer">groups_accept_invite</a></code>). I’ve found <a href="http://hookr.io/plugins/buddypress/#index=a" target="_blank" rel="noopener noreferrer">Hookr</a> to be a really useful site to find, well, hooks.<br>
Hope that helps!</p>
<p>The post <a rel="nofollow" href="/auto-subscribe-group-forum/">Automatically subscribe to Buddypress group forum</a> appeared first on <a rel="nofollow" href="/">Alex Taylor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/auto-subscribe-group-forum/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Controlling access to BuddyPress pages</title>
		<link>/controlling-access-buddypress-pages/</link>
					<comments>/controlling-access-buddypress-pages/#comments</comments>
		
		<dc:creator><![CDATA[Alex Taylor]]></dc:creator>
		<pubDate>Mon, 30 May 2016 23:24:50 +0000</pubDate>
				<category><![CDATA[Web-dev]]></category>
		<category><![CDATA[buddypress]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">/?p=2559</guid>

					<description><![CDATA[<p>I wanted to find a way to control access to specific BuddyPress pages on a Residents Association site I help manage. I wanted, in short, to have greater control over the pages different types of members and non-members could view on the site. I found ways&#160;to do this via plugins (e.g. BuddyPress Members Only) or [...]</p>
<p><a class="btn btn-secondary understrap-read-more-link" href="/controlling-access-buddypress-pages/">Read More...<span class="screen-reader-text"> from Controlling access to BuddyPress pages</span></a></p>
<p>The post <a rel="nofollow" href="/controlling-access-buddypress-pages/">Controlling access to BuddyPress pages</a> appeared first on <a rel="nofollow" href="/">Alex Taylor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>I wanted to find a way to control access to specific <a href="https://buddypress.org/" target="_blank" rel="noopener noreferrer">BuddyPress</a> pages on a <a href="http://jhera.org/" target="_blank" rel="noopener noreferrer">Residents Association</a> site I help manage. I wanted, in short, to have greater control over the pages different types of members and non-members could view on the site.<br>
I found ways&nbsp;to do this via plugins (e.g. <a href="https://wordpress.org/plugins/buddypress-members-only/" target="_blank" rel="noopener noreferrer">BuddyPress Members Only</a>) or <a href="https://buddypress.org/support/topic/how-to-make-a-private-community/page/5/?topic_page=6&amp;num=15%2F" target="_blank" rel="noopener noreferrer">tweaks</a> (e.g. <a href="https://buddypress.org/support/topic/hiding-groups-activity-members-list-to-non-members/" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://seventhqueen.com/blog/code-snippets/restrict-guest-users-from-accessing-buddypress-or-bbpress-pages.html" target="_blank" rel="noopener noreferrer">here</a>), but nothing quite fit my needs. The plugins were mostly all or nothing, and the tweaks were helpful but didn’t offer a full solution.<br>
The following, then, offers three steps I’ve taken to control access to a WordPress site’s&nbsp;BuddyPress members pages, even ones dynamically published.<span id="more-2559"></span> It relies on adding a&nbsp;relatively straightforward function to the <a id="tippy_tip0_2190_anchor"></a> in a site’s active theme folder.</p>
<h1 style="font-size: 1.3rem;">1. Restricted access for logged-out users</h1>
<p>This first step offers the simplest condition:&nbsp;preventing&nbsp;logged out users from accessing BuddyPress member pages.</p>
<p style="font-size: 1rem; font-weight: bold;">Example 1.1</p>
<pre class="brush: php; highlight: [5,7]; title: Example 1.1; wrap-lines: true; notranslate">// Blocks pages from users who aren't logged in.
function bp_redirect_pages() {
 // Determines whether a user is logged in. If not, user is re-directed to log-in page when trying to access defined BP pages.
 if ( !is_user_logged_in() &amp;&amp; ( bp_is_group_forum() || bbp_is_single_forum() || bbp_is_single_topic() || bp_is_forums_component() || bp_is_members_component() || bp_is_groups_component() || bp_is_profile_component() || bp_is_activity_component() || bp_is_user() || bp_is_user_profile() ) ) {
 // redirects logged-out users to login page. See https://codex.wordpress.org/Function_Reference/auth_redirect
 auth_redirect();
 }
}
add_action( 'template_redirect', 'bp_redirect_pages' );</pre>
<p>In the above, we’re saying:</p>
<p style="padding-left: 30px;"><code>if</code> a user is not logged in (line 4);<br>
<code>&amp;&amp;</code> (equivalent to <code>AND</code>) one of a number of types of pages are being loaded (starting from &amp;&amp; on line 4);<br>
redirect (<code>auth-redirect</code>) the user to the log-in page (line 6).</p>
<p>Note the restricted pages are nested in brackets on line 5 and separated by the <strong>or</strong> (i.e. <code>||</code>) operator. e.g.:</p>
<p style="padding-left: 30px;"><code>bp_is_group_forum() || bbp_is_single_forum()</code></p>
<p>This if statement is then checking to see if <strong>any</strong> of the&nbsp;listed&nbsp;pages is trying to be loaded.<br>
Hopefully, this list being checked makes sense. As an example, calling the function&nbsp;<a href="http://hookr.io/plugins/buddypress/2.6.2/functions/bp_is_group_forum/" target="_blank" rel="noopener noreferrer">bp_is_group_forum()</a>&nbsp;checks to see if the page being loaded is a group’s forum page. I’ve found a useful resource for checking these functions is <a href="http://hookr.io/plugins/buddypress/" target="_blank" rel="noopener noreferrer">hookr.io</a>. The list can, of course, be customised to suit your needs.</p>
<h2 style="font-size: 1.1rem;"><em>Adding some redundancy</em></h2>
<p>By experimenting, I’ve actually found this list doesn’t always behave in the way I’d expect, so I’ve built some redundancy into the if statement in Example 1. This adds a few&nbsp;more lines of code but I’ve found makes it pretty bullet proof. I’m sure there’s some duplication and the code could be more efficient — if anyone has any suggestions please do comment. Anyway, here’s the new option:</p>
<p style="font-size: 1rem; font-weight: bold;">Example 1.2</p>
<pre class="brush: php; highlight: [4,6,9]; title: Example 1.2; wrap-lines: true; notranslate">// Blocks pages from different users and users who aren't logged in
function bp_redirect_pages() {
	// Gets the URL for the page the user is trying to access
	$url = $_SERVER['REQUEST_URI'];
	// Breaks down the above URL into its parts and "news"
	$explode_url = explode("/", $url);
	// Blocks logged out from defined pages
	else if ( !is_user_logged_in() &amp;&amp; ( bp_is_group_forum() || bbp_is_single_forum() || bbp_is_single_topic() || bp_is_forums_component() || bp_is_members_component() || bp_is_groups_component() || bp_is_profile_component() || bp_is_activity_component() || bp_is_user() || bp_is_user_profile() || in_array("activity", $explode_url) || in_array("forums", $explode_url) || in_array("members", $explode_url) || in_array("groups", $explode_url) ) ) {
		auth_redirect();
    }
}
add_action( 'template_redirect', 'bp_redirect_pages' );</pre>
<p>There are three notable additions here:</p>
<p style="padding-left: 30px;"><code>$url</code> (line 4) defines a variable that saves the url the user is trying to access;<br>
<code>$explode_url</code> (line 6) is an array variable that contains a break down of the above url parts, so “bbc.co.uk/news/” would be broken down into “bbc.co.uk” and “news”;<br>
And in the last portion of line 9, where I use <code>in_array()</code> I set some new criteria for what pages to block.</p>
<p>Here are the basics to this argument so you can decide what will work for you:<br>
<code>in_array("members", $explode_url)</code> checks for “members” in <code>$explode_url</code>. So, let’s say I’m accessing a site <code>http://jhera.org/</code> and want to view <code>http://jhera.org/members/joe_blogs/</code>. Because “members” is in the URL, the function will block access to this page for non-logged-in users and redirect them to the login page.<br>
In short, whatever is between the first set of quotation marks in the <code>in_array("xxxx", $explode_url)</code> argument will be tested against <code>$explode_url</code>, and if found the page will be blocked. In Example 1.2, I’m preventing non-logged in users accessing pages that include “activity”, “forums”, “members”, and “groups”. You can check your own site and see what terms would work best. Also, a variation of this method can be used to restrict access to categories of pages. Look at <code>in_category( array( xx, xx ) )</code> argument.</p>
<h1 style="font-size: 1.3rem;">2. Control access for members of different BuddyPress groups</h1>
<p>Something else we can do using this basic principle is control access for different BuddyPress groups you might have on your site:</p>
<p style="font-size: 1rem; font-weight: bold;">Example 2</p>
<pre class="brush: php; title: Example 2; wrap-lines: true; notranslate">// Blocks pages from different users and users who aren't logged in
function bp_redirect_pages() {
	$current_user = wp_get_current_user();
	$group_id = 1;  // full members
	$url = $_SERVER['REQUEST_URI'];
	$explode_url = explode("/", $url);
	// Blocks users who aren't full members from group pages
	if ( !groups_is_user_member( $current_user-&gt;ID, $group_id ) &amp;&amp; ( bp_is_groups_component() || in_array("groups", $explode_url) ) ) {
		wp_redirect( home_url() . '/membership-signup/' );
	}
}
add_action( 'template_redirect', 'bp_redirect_pages' );</pre>
<p>Here, we’re introducing a few new things:</p>
<p style="padding-left: 30px;"><code>$current_user</code> returns and saves information about the user trying to load the page and will later (line 8) allow us to retrieve their user ID.<br>
<code>$group_id</code> is the <a id="tippy_tip1_9729_anchor"></a> for a pre-defined group. In the case above, it’s “1”.</p>
<p>Before we get to the <code>if</code> statement, notice I’ve used a different redirect method here. <code>wp_redirect( home_url() . '/membership-signup/' );</code> redirects to “home_URL/membership-signup/”. You can add anything instead of <code>'/membership-signup/'</code> so long as it corresponds to a page on your site.<br>
In this example’s <code>if</code> statement, <code>!groups_is_user_member( $current_user-&gt;ID, $group_id )</code> is testing to see if the current user (<code>$current_user</code>) is <strong>not</strong>&nbsp;a member of the group pre-defined (<code>$group_id</code>). Specifically, we’re checking if the current user’s ID (<code>$current_user-&gt;ID</code>) can be found in the group with ID 1 (<code>$group_id</code>).<br>
The <code>if</code> statement is also testing whether the page the user wants to load is a BuddyPress group pages (<code>(bp_is_groups_component()</code>) or contains “group” in the URL (<code>in_array("groups", $explode_url)</code>).<br>
The end result is to redirect users who aren’t in group 1 when they are trying to access BuddyPress group pages. Hopefully, you can see how the other arguments in Example 1 can be used to restrict access to more pages.</p>
<h1 style="font-size: 1.3rem;">3. Restrict access by member type</h1>
<p>Finally, let me cover one last option. BuddyPress has made it possible to define <a href="https://codex.buddypress.org/developer/member-types/" target="_blank" rel="noopener noreferrer">member types</a>, for instance for my residents association site we’ve&nbsp;defined two different levels of membership, i.e. ‘full members’ and ‘associate members’. If you’ve done something like this, you may want to restrict access for certain member types. Here’s how:</p>
<p style="font-size: 1rem; font-weight: bold;">Example 3</p>
<pre class="brush: php; title: Example 3; wrap-lines: true; notranslate">// Blocks pages from different users and users who aren't logged in
function bp_redirect_pages() {
	$current_user = wp_get_current_user();
	// Declares a variable containing the current user's member type
	$member_type = bp_get_member_type( $current_user-&gt;ID );
	$url = $_SERVER['REQUEST_URI'];
	$explode_url = explode("/", $url);
	// Redirects members who are 'associate-member' types from access urls containing 'full-members'
	if ( 'associate-member' === $member_type &amp;&amp; in_array("full-members", $explode_url) ) {
		wp_redirect( home_url() . '/membership-signup/' );
	}
}
add_action( 'template_redirect', 'bp_redirect_pages' );</pre>
<p>The main addition here is <code>$member_type = bp_get_member_type( $current_user-&gt;ID );</code>.<br>
<code>bp_get_member_type( $current_user-&gt;ID )</code> returns the Buddypress member type for the current user, and then it is saved as a variable <code>$member_type</code>.<br>
The <code>if</code> statement then tests whether the current user is (<code>===</code>) an ‘associate-member’ (i.e., has the member type ‘associate-member’), and, in this case, whether the URL being loaded contains <code>"full-members"</code>. If the result is true, the user is redirected to the sign up page.<br>
That’s about it. There are obviously many more options, but hopefully this provides&nbsp;the basics for&nbsp;managing access to BP pages. Of course, the above can all be put together in a series of if/else statements to manage access under different conditions, like so:</p>
<p style="font-size: 1rem; font-weight: bold;">Example 4</p>
<pre class="brush: php; title: Example 4; wrap-lines: true; notranslate">function bp_redirect_pages() {
	$current_user = wp_get_current_user();
	$member_type = bp_get_member_type( $current_user-&gt;ID );
	$group_id = 1;  // All members
	$url = $_SERVER['REQUEST_URI'];
	$explode_url = explode("/", $url);
	if ( 'associate-member' === $member_type &amp;&amp; in_category( array( 110,137 ) ) ) {
 wp_redirect( home_url() . '/membership-signup/' );
}
	else if ( !groups_is_user_member( $current_user-&gt;ID, $group_id ) &amp;&amp; ( bp_is_groups_component() || bp_is_activity_component() || bp_is_members_component() || in_array("activity", $explode_url) || in_array("groups", $explode_url) )) {
		wp_redirect( home_url() . '/membership-signup/; }
	else if ( !is_user_logged_in() &amp;&amp; ( bp_is_group_forum() || bbp_is_single_forum() || bbp_is_single_topic() || bp_is_forums_component() || bp_is_members_component() || bp_is_groups_component() || bp_is_profile_component() || bp_is_activity_component() || bp_is_user() || bp_is_user_profile() || in_array("activity", $explode_url) || in_array("forums", $explode_url) || in_array("members", $explode_url) || in_array("groups", $explode_url) || in_category( array( 110,137 ) ) ) ) {
		auth_redirect();
    }
}
add_action( 'template_redirect', 'bp_redirect_pages' );</pre>
<div class="tippy" data-title="function.php file" data-showheader="false" data-anchor="#tippy_tip0_2190_anchor">For more information on the funsctions.php file see helpful information on this&nbsp;<a href="http://www.wpbeginner.com/glossary/functions-php/" target="_blank" rel="noopener noreferrer">WordPress for beginners page</a>, this <a href="https://premium.wpmudev.org/blog/functions-file/" target="_blank" rel="noopener noreferrer">wpmudev page</a>, and the <a href="https://codex.wordpress.org/Functions_File_Explained" target="_blank" rel="noopener noreferrer">WordPress codex</a></div>
<div class="tippy" data-title="BuddyPress group id" data-showheader="false" data-anchor="#tippy_tip1_9729_anchor">To work out what a group’s id is, navigate to the WordPress admin page, choose “Groups” from the left hand menu, choose to edit a group, look at the URL and the number after “gid=” is the group ID.</div>
<p>The post <a rel="nofollow" href="/controlling-access-buddypress-pages/">Controlling access to BuddyPress pages</a> appeared first on <a rel="nofollow" href="/">Alex Taylor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/controlling-access-buddypress-pages/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
		<item>
		<title>Custom wordpress full width page template (Twenty Twelve theme)</title>
		<link>/wordpress-full-width-page-template/</link>
					<comments>/wordpress-full-width-page-template/#comments</comments>
		
		<dc:creator><![CDATA[Alex Taylor]]></dc:creator>
		<pubDate>Tue, 13 May 2014 20:06:58 +0000</pubDate>
				<category><![CDATA[Web-dev]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">/?p=388</guid>

					<description><![CDATA[<p>This took me a while to work out so I thought it would be worth sharing. Using the Twenty Twelve WordPress theme (on this site), I wanted to create my own page template with no sidebar and with full width content (e.g. see here). I thought it would be a simple matter of copying the [...]</p>
<p><a class="btn btn-secondary understrap-read-more-link" href="/wordpress-full-width-page-template/">Read More...<span class="screen-reader-text"> from Custom wordpress full width page template (Twenty Twelve theme)</span></a></p>
<p>The post <a rel="nofollow" href="/wordpress-full-width-page-template/">Custom wordpress full width page template (Twenty Twelve theme)</a> appeared first on <a rel="nofollow" href="/">Alex Taylor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p><span style="line-height: 1.5em;"><a href="wp-content/uploads/2014/04/my-full-width.png"><img loading="lazy" class=" wp-image-403 alignleft" alt="my-full-width" src="wp-content/uploads/2014/04/my-full-width.png" width="395" height="331"></a>This took me a while to work out so I thought it would be worth sharing.</span><br>
<span style="line-height: 1.5em;"><br>
Using the Twenty Twelve WordPress theme (</span><a style="line-height: 1.5em;" href="http://tenisonroad.com/" target="_blank" rel="noopener noreferrer">on this site</a><span style="line-height: 1.5em;">), I wanted to create my own page template with no sidebar and with full width content (e.g. see </span><a style="line-height: 1.5em;" href="http://tenisonroad.com/data-log/" target="_blank" rel="noopener noreferrer">here</a><span style="line-height: 1.5em;">). I thought it would be a simple matter of copying the existing full-width.php page template (see </span><a style="line-height: 1.5em;" href="https://github.com/WordPress/WordPress/blob/master/wp-content/themes/twentytwelve/page-templates/full-width.php" target="_blank" rel="noopener noreferrer">code</a><span style="line-height: 1.5em;">) from the Twenty Twelve <code>/wp-content/themes/twentytwelve/page-templates</code> directory, renaming it, and moving it to my own child theme page-templates directory. That didn’t work. It turns out you need to change a couple of things in the template file and add a few lines of script to the functions.php file.</span><span id="more-388"></span><br>
&nbsp;<br>
Let’s start from the beginning (assuming you’ve already created a <a href="https://codex.wordpress.org/Child_Themes" target="_blank" rel="noopener noreferrer">child theme</a>) and you have access to your WordPress file directories (I’m using FTP):<br>
<strong>1. Duplicate:</strong><br>
<code>/wp-content/themes/twentytwelve/page-templates/full-width.php</code><br>
<strong>2. Rename this duplicated file to say:</strong><br>
<code>my-full-width.php</code><br>
You can call the file what you like (so long as it has .php at the end and conforms to usual file-naming rules).<br>
<strong>3. Move:</strong><br>
<code>my-full-width.php</code> to <code>/wp-content/themes/*twentytwelve-child*/page-templates/</code><br>
<code>*twentytwelve-child*</code> refers to the name of the child theme folder — yours may differ.<br>
<strong>4. Open this new file:</strong><br>
<em>(a) On the line:</em> <code>* Template Name: Full-width Page Template, No Sidebar</code><br>
Replace the text after the colon with whatever you want the option to be called in the WordPress admin panel (e.g. <code>My Full-width Page Template, No Sidebar</code>)<br>
<em>(b) On the line:</em> <code>&lt;div id="primary"&gt;&lt;/div&gt;</code><br>
Replace <code>class="site-content"</code> with <code>class="full-width"</code>.** If it matters to you, this is making reference to the CSS class in <code>style.css</code> that sets the content width to be 100%.<br>
That’s all you need to do with your new page template. Save and close it.<br>
<strong>5. Open:</strong>&nbsp;<br>
<code>/wp-content/themes/*twentytwelve-child*/functions.php</code><br>
If this file doesn’t exist create a new text file called <code>functions.php</code> and place it in the child theme directory.<br>
<strong>6. Paste the following into <code>functions.php</code></strong></p>
<pre>&lt;?php
// Add CSS class by filter
add_filter('body_class','twentytwelvechild_body_class_adapt',20);
function twentytwelvechild_body_class_adapt( $classes ) {
// Apply 'full-width' class to form_page.php body
if ( is_page_template( 'page-templates/my-full-width.php' ) ) $classes[] = 'full-width';
return $classes;
}
?&gt;</pre>
<p>I owe thanks to <a href="http://wordpress.org/support/topic/get-full-width-class-on-category-template#post-3668742" target="_blank" rel="noopener noreferrer">this thread</a> for providing this php script.<br>
Two things you need to look out for here. First, with the directory/file name to your page template <code>page-templates/my-full-width.php</code> make sure this is right for your specific case — you may have chosen a different location or file name. Second, with <code>$classes[] = 'full-width';</code>, the <code>'full-width'</code> refers to a class in <code>style.css</code> either in the original theme directory or in your child theme directory. This is the class in Twenty Twelve. If you’re using a different theme, it may be the class name is different (e.g. <code>'full-width-content'</code>) or that you need to add a new class yourself. <strong>If</strong> you’re adding you’re own class to <code>style.css</code>, it should look something like this:</p>
<pre><span style="line-height: 1.5em;">body.full-width .site-content {</span></pre>
<pre> width: 100%;
 }</pre>
<p>&nbsp;<br>
That should be it. Hope this helps.<br>
&nbsp;<br>
** The class and file names are specific to the Twenty Twelve theme. If you can work out the details for your own theme (or add your own) this should work for other themes too.</p>
<p>The post <a rel="nofollow" href="/wordpress-full-width-page-template/">Custom wordpress full width page template (Twenty Twelve theme)</a> appeared first on <a rel="nofollow" href="/">Alex Taylor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/wordpress-full-width-page-template/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>
